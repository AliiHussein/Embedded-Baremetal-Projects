
Smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  000009ec  00000a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bcc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cd7  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a23  00000000  00000000  000029ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ff1  00000000  00000000  00003422  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000023c  00000000  00000000  00004414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d4  00000000  00000000  00004650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f06  00000000  00000000  00004b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00005a2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c5 04 	call	0x98a	; 0x98a <main>
  7a:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <eeprom_write>:
 */ 

#include "eeprom.h"

void eeprom_write(uint16_t add, uint8_t data){
	while(READBIT(EECR, EEWE) != 0); // wait until EEWE becomes zero
  82:	e1 99       	sbic	0x1c, 1	; 28
  84:	fe cf       	rjmp	.-4      	; 0x82 <eeprom_write>
	EEAR = add;
  86:	9f bb       	out	0x1f, r25	; 31
  88:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
  8a:	6d bb       	out	0x1d, r22	; 29
	SETBIT(EECR, EEMWE);
  8c:	8c b3       	in	r24, 0x1c	; 28
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	8c bb       	out	0x1c, r24	; 28
	SETBIT(EECR, EEWE);
  92:	8c b3       	in	r24, 0x1c	; 28
  94:	82 60       	ori	r24, 0x02	; 2
  96:	8c bb       	out	0x1c, r24	; 28
  98:	08 95       	ret

0000009a <eeprom_read>:
}

uint8_t eeprom_read(uint16_t add){
	while(READBIT(EECR, EEWE) != 0); // wait until EEWE becomes zero
  9a:	e1 99       	sbic	0x1c, 1	; 28
  9c:	fe cf       	rjmp	.-4      	; 0x9a <eeprom_read>
	EEAR = add;
  9e:	9f bb       	out	0x1f, r25	; 31
  a0:	8e bb       	out	0x1e, r24	; 30
	SETBIT(EECR, EERE);
  a2:	8c b3       	in	r24, 0x1c	; 28
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
  a8:	8d b3       	in	r24, 0x1d	; 29
}
  aa:	08 95       	ret

000000ac <KEYPAD_init>:
* Purpose      : initialize keypad 4x4
* Parameters   : void
* Return value : void
*****************************************************************************/
void KEYPAD_init(){
	INIT_KEYPAD_PINS();
  ac:	84 b3       	in	r24, 0x14	; 20
  ae:	80 6f       	ori	r24, 0xF0	; 240
  b0:	84 bb       	out	0x14, r24	; 20
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	08 95       	ret

000000b8 <KEYPAD_read>:
* Purpose      : Read pins of keypad
* Parameters   : void
* Return value : -1 if no press, value if pressed on of push buttons
*****************************************************************************/
int8_t KEYPAD_read(){
	K4(0);K5(1);K6(1);K7(1);
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	8f 7e       	andi	r24, 0xEF	; 239
  bc:	85 bb       	out	0x15, r24	; 21
  be:	85 b3       	in	r24, 0x15	; 21
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	85 bb       	out	0x15, r24	; 21
	if(K0() == 0) return keypad_matrix[0];
  d0:	98 9b       	sbis	0x13, 0	; 19
  d2:	5c c0       	rjmp	.+184    	; 0x18c <KEYPAD_read+0xd4>
	if(K1() == 0) return keypad_matrix[1];
  d4:	99 9b       	sbis	0x13, 1	; 19
  d6:	5c c0       	rjmp	.+184    	; 0x190 <KEYPAD_read+0xd8>
	if(K2() == 0) return keypad_matrix[2];
  d8:	9a 9b       	sbis	0x13, 2	; 19
  da:	5c c0       	rjmp	.+184    	; 0x194 <KEYPAD_read+0xdc>
	if(K3() == 0) return keypad_matrix[3];
  dc:	9b 9b       	sbis	0x13, 3	; 19
  de:	5c c0       	rjmp	.+184    	; 0x198 <KEYPAD_read+0xe0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	8f e1       	ldi	r24, 0x1F	; 31
  e2:	9e e4       	ldi	r25, 0x4E	; 78
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <KEYPAD_read+0x2c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <KEYPAD_read+0x32>
  ea:	00 00       	nop
	_delay_ms(5);
	
	K4(1);K5(0);K6(1);K7(1);
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	80 61       	ori	r24, 0x10	; 16
  f0:	85 bb       	out	0x15, r24	; 21
  f2:	85 b3       	in	r24, 0x15	; 21
  f4:	8f 7d       	andi	r24, 0xDF	; 223
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	80 68       	ori	r24, 0x80	; 128
 102:	85 bb       	out	0x15, r24	; 21
	if(K0() == 0) return keypad_matrix[4];
 104:	98 9b       	sbis	0x13, 0	; 19
 106:	4a c0       	rjmp	.+148    	; 0x19c <KEYPAD_read+0xe4>
	if(K1() == 0) return keypad_matrix[5];
 108:	99 9b       	sbis	0x13, 1	; 19
 10a:	4a c0       	rjmp	.+148    	; 0x1a0 <KEYPAD_read+0xe8>
	if(K2() == 0) return keypad_matrix[6];
 10c:	9a 9b       	sbis	0x13, 2	; 19
 10e:	4a c0       	rjmp	.+148    	; 0x1a4 <KEYPAD_read+0xec>
	if(K3() == 0) return keypad_matrix[7];
 110:	9b 9b       	sbis	0x13, 3	; 19
 112:	4a c0       	rjmp	.+148    	; 0x1a8 <KEYPAD_read+0xf0>
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	9e e4       	ldi	r25, 0x4E	; 78
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <KEYPAD_read+0x60>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <KEYPAD_read+0x66>
 11e:	00 00       	nop
	_delay_ms(5);
	
	K4(1);K5(1);K6(0);K7(1);
 120:	85 b3       	in	r24, 0x15	; 21
 122:	80 61       	ori	r24, 0x10	; 16
 124:	85 bb       	out	0x15, r24	; 21
 126:	85 b3       	in	r24, 0x15	; 21
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	85 b3       	in	r24, 0x15	; 21
 12e:	8f 7b       	andi	r24, 0xBF	; 191
 130:	85 bb       	out	0x15, r24	; 21
 132:	85 b3       	in	r24, 0x15	; 21
 134:	80 68       	ori	r24, 0x80	; 128
 136:	85 bb       	out	0x15, r24	; 21
	if(K0() == 0) return keypad_matrix[8];
 138:	98 9b       	sbis	0x13, 0	; 19
 13a:	38 c0       	rjmp	.+112    	; 0x1ac <KEYPAD_read+0xf4>
	if(K1() == 0) return keypad_matrix[9];
 13c:	99 9b       	sbis	0x13, 1	; 19
 13e:	38 c0       	rjmp	.+112    	; 0x1b0 <KEYPAD_read+0xf8>
	if(K2() == 0) return keypad_matrix[10];
 140:	9a 9b       	sbis	0x13, 2	; 19
 142:	38 c0       	rjmp	.+112    	; 0x1b4 <KEYPAD_read+0xfc>
	if(K3() == 0) return keypad_matrix[11];
 144:	9b 9b       	sbis	0x13, 3	; 19
 146:	38 c0       	rjmp	.+112    	; 0x1b8 <KEYPAD_read+0x100>
 148:	8f e1       	ldi	r24, 0x1F	; 31
 14a:	9e e4       	ldi	r25, 0x4E	; 78
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <KEYPAD_read+0x94>
 150:	00 c0       	rjmp	.+0      	; 0x152 <KEYPAD_read+0x9a>
 152:	00 00       	nop
	_delay_ms(5);
	
	K4(1);K5(1);K6(1);K7(0);
 154:	85 b3       	in	r24, 0x15	; 21
 156:	80 61       	ori	r24, 0x10	; 16
 158:	85 bb       	out	0x15, r24	; 21
 15a:	85 b3       	in	r24, 0x15	; 21
 15c:	80 62       	ori	r24, 0x20	; 32
 15e:	85 bb       	out	0x15, r24	; 21
 160:	85 b3       	in	r24, 0x15	; 21
 162:	80 64       	ori	r24, 0x40	; 64
 164:	85 bb       	out	0x15, r24	; 21
 166:	85 b3       	in	r24, 0x15	; 21
 168:	8f 77       	andi	r24, 0x7F	; 127
 16a:	85 bb       	out	0x15, r24	; 21
	if(K0() == 0) return keypad_matrix[12];
 16c:	98 9b       	sbis	0x13, 0	; 19
 16e:	26 c0       	rjmp	.+76     	; 0x1bc <KEYPAD_read+0x104>
	if(K1() == 0) return keypad_matrix[13];
 170:	99 9b       	sbis	0x13, 1	; 19
 172:	26 c0       	rjmp	.+76     	; 0x1c0 <KEYPAD_read+0x108>
	if(K2() == 0) return keypad_matrix[14];
 174:	9a 9b       	sbis	0x13, 2	; 19
 176:	26 c0       	rjmp	.+76     	; 0x1c4 <KEYPAD_read+0x10c>
	if(K3() == 0) return keypad_matrix[15];
 178:	9b 9b       	sbis	0x13, 3	; 19
 17a:	26 c0       	rjmp	.+76     	; 0x1c8 <KEYPAD_read+0x110>
 17c:	8f e1       	ldi	r24, 0x1F	; 31
 17e:	9e e4       	ldi	r25, 0x4E	; 78
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <KEYPAD_read+0xc8>
 184:	00 c0       	rjmp	.+0      	; 0x186 <KEYPAD_read+0xce>
 186:	00 00       	nop
	_delay_ms(5);
	
	return -1;
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	08 95       	ret
* Parameters   : void
* Return value : -1 if no press, value if pressed on of push buttons
*****************************************************************************/
int8_t KEYPAD_read(){
	K4(0);K5(1);K6(1);K7(1);
	if(K0() == 0) return keypad_matrix[0];
 18c:	87 e3       	ldi	r24, 0x37	; 55
 18e:	08 95       	ret
	if(K1() == 0) return keypad_matrix[1];
 190:	88 e3       	ldi	r24, 0x38	; 56
 192:	08 95       	ret
	if(K2() == 0) return keypad_matrix[2];
 194:	89 e3       	ldi	r24, 0x39	; 57
 196:	08 95       	ret
	if(K3() == 0) return keypad_matrix[3];
 198:	8f e2       	ldi	r24, 0x2F	; 47
 19a:	08 95       	ret
	_delay_ms(5);
	
	K4(1);K5(0);K6(1);K7(1);
	if(K0() == 0) return keypad_matrix[4];
 19c:	84 e3       	ldi	r24, 0x34	; 52
 19e:	08 95       	ret
	if(K1() == 0) return keypad_matrix[5];
 1a0:	85 e3       	ldi	r24, 0x35	; 53
 1a2:	08 95       	ret
	if(K2() == 0) return keypad_matrix[6];
 1a4:	86 e3       	ldi	r24, 0x36	; 54
 1a6:	08 95       	ret
	if(K3() == 0) return keypad_matrix[7];
 1a8:	8a e2       	ldi	r24, 0x2A	; 42
 1aa:	08 95       	ret
	_delay_ms(5);
	
	K4(1);K5(1);K6(0);K7(1);
	if(K0() == 0) return keypad_matrix[8];
 1ac:	81 e3       	ldi	r24, 0x31	; 49
 1ae:	08 95       	ret
	if(K1() == 0) return keypad_matrix[9];
 1b0:	82 e3       	ldi	r24, 0x32	; 50
 1b2:	08 95       	ret
	if(K2() == 0) return keypad_matrix[10];
 1b4:	83 e3       	ldi	r24, 0x33	; 51
 1b6:	08 95       	ret
	if(K3() == 0) return keypad_matrix[11];
 1b8:	8d e2       	ldi	r24, 0x2D	; 45
 1ba:	08 95       	ret
	_delay_ms(5);
	
	K4(1);K5(1);K6(1);K7(0);
	if(K0() == 0) return keypad_matrix[12];
 1bc:	83 e6       	ldi	r24, 0x63	; 99
 1be:	08 95       	ret
	if(K1() == 0) return keypad_matrix[13];
 1c0:	80 e3       	ldi	r24, 0x30	; 48
 1c2:	08 95       	ret
	if(K2() == 0) return keypad_matrix[14];
 1c4:	8d e3       	ldi	r24, 0x3D	; 61
 1c6:	08 95       	ret
	if(K3() == 0) return keypad_matrix[15];
 1c8:	8b e2       	ldi	r24, 0x2B	; 43
	_delay_ms(5);
	
	return -1;
}
 1ca:	08 95       	ret

000001cc <LCD_write_char>:
	}
	while (i >= 0){
		LCD_write_char(num_arr[i]);
		i--;
	}
}
 1cc:	9b b3       	in	r25, 0x1b	; 27
 1ce:	94 60       	ori	r25, 0x04	; 4
 1d0:	9b bb       	out	0x1b, r25	; 27
 1d2:	84 ff       	sbrs	r24, 4
 1d4:	04 c0       	rjmp	.+8      	; 0x1de <LCD_write_char+0x12>
 1d6:	9b b3       	in	r25, 0x1b	; 27
 1d8:	90 61       	ori	r25, 0x10	; 16
 1da:	9b bb       	out	0x1b, r25	; 27
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <LCD_write_char+0x18>
 1de:	9b b3       	in	r25, 0x1b	; 27
 1e0:	9f 7e       	andi	r25, 0xEF	; 239
 1e2:	9b bb       	out	0x1b, r25	; 27
 1e4:	85 ff       	sbrs	r24, 5
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <LCD_write_char+0x24>
 1e8:	9b b3       	in	r25, 0x1b	; 27
 1ea:	90 62       	ori	r25, 0x20	; 32
 1ec:	9b bb       	out	0x1b, r25	; 27
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <LCD_write_char+0x2a>
 1f0:	9b b3       	in	r25, 0x1b	; 27
 1f2:	9f 7d       	andi	r25, 0xDF	; 223
 1f4:	9b bb       	out	0x1b, r25	; 27
 1f6:	86 ff       	sbrs	r24, 6
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <LCD_write_char+0x36>
 1fa:	9b b3       	in	r25, 0x1b	; 27
 1fc:	90 64       	ori	r25, 0x40	; 64
 1fe:	9b bb       	out	0x1b, r25	; 27
 200:	03 c0       	rjmp	.+6      	; 0x208 <LCD_write_char+0x3c>
 202:	9b b3       	in	r25, 0x1b	; 27
 204:	9f 7b       	andi	r25, 0xBF	; 191
 206:	9b bb       	out	0x1b, r25	; 27
 208:	88 23       	and	r24, r24
 20a:	24 f4       	brge	.+8      	; 0x214 <LCD_write_char+0x48>
 20c:	9b b3       	in	r25, 0x1b	; 27
 20e:	90 68       	ori	r25, 0x80	; 128
 210:	9b bb       	out	0x1b, r25	; 27
 212:	03 c0       	rjmp	.+6      	; 0x21a <LCD_write_char+0x4e>
 214:	9b b3       	in	r25, 0x1b	; 27
 216:	9f 77       	andi	r25, 0x7F	; 127
 218:	9b bb       	out	0x1b, r25	; 27
 21a:	9b b3       	in	r25, 0x1b	; 27
 21c:	98 60       	ori	r25, 0x08	; 8
 21e:	9b bb       	out	0x1b, r25	; 27
 220:	ef e9       	ldi	r30, 0x9F	; 159
 222:	ff e0       	ldi	r31, 0x0F	; 15
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCD_write_char+0x58>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_write_char+0x5e>
 22a:	00 00       	nop
 22c:	9b b3       	in	r25, 0x1b	; 27
 22e:	97 7f       	andi	r25, 0xF7	; 247
 230:	9b bb       	out	0x1b, r25	; 27
 232:	ef e9       	ldi	r30, 0x9F	; 159
 234:	ff e0       	ldi	r31, 0x0F	; 15
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_write_char+0x6a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_write_char+0x70>
 23c:	00 00       	nop
 23e:	80 ff       	sbrs	r24, 0
 240:	04 c0       	rjmp	.+8      	; 0x24a <LCD_write_char+0x7e>
 242:	9b b3       	in	r25, 0x1b	; 27
 244:	90 61       	ori	r25, 0x10	; 16
 246:	9b bb       	out	0x1b, r25	; 27
 248:	03 c0       	rjmp	.+6      	; 0x250 <LCD_write_char+0x84>
 24a:	9b b3       	in	r25, 0x1b	; 27
 24c:	9f 7e       	andi	r25, 0xEF	; 239
 24e:	9b bb       	out	0x1b, r25	; 27
 250:	81 ff       	sbrs	r24, 1
 252:	04 c0       	rjmp	.+8      	; 0x25c <LCD_write_char+0x90>
 254:	9b b3       	in	r25, 0x1b	; 27
 256:	90 62       	ori	r25, 0x20	; 32
 258:	9b bb       	out	0x1b, r25	; 27
 25a:	03 c0       	rjmp	.+6      	; 0x262 <LCD_write_char+0x96>
 25c:	9b b3       	in	r25, 0x1b	; 27
 25e:	9f 7d       	andi	r25, 0xDF	; 223
 260:	9b bb       	out	0x1b, r25	; 27
 262:	82 ff       	sbrs	r24, 2
 264:	04 c0       	rjmp	.+8      	; 0x26e <LCD_write_char+0xa2>
 266:	9b b3       	in	r25, 0x1b	; 27
 268:	90 64       	ori	r25, 0x40	; 64
 26a:	9b bb       	out	0x1b, r25	; 27
 26c:	03 c0       	rjmp	.+6      	; 0x274 <LCD_write_char+0xa8>
 26e:	9b b3       	in	r25, 0x1b	; 27
 270:	9f 7b       	andi	r25, 0xBF	; 191
 272:	9b bb       	out	0x1b, r25	; 27
 274:	83 ff       	sbrs	r24, 3
 276:	04 c0       	rjmp	.+8      	; 0x280 <LCD_write_char+0xb4>
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	80 68       	ori	r24, 0x80	; 128
 27c:	8b bb       	out	0x1b, r24	; 27
 27e:	03 c0       	rjmp	.+6      	; 0x286 <LCD_write_char+0xba>
 280:	8b b3       	in	r24, 0x1b	; 27
 282:	8f 77       	andi	r24, 0x7F	; 127
 284:	8b bb       	out	0x1b, r24	; 27
 286:	8b b3       	in	r24, 0x1b	; 27
 288:	88 60       	ori	r24, 0x08	; 8
 28a:	8b bb       	out	0x1b, r24	; 27
 28c:	8f e9       	ldi	r24, 0x9F	; 159
 28e:	9f e0       	ldi	r25, 0x0F	; 15
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCD_write_char+0xc4>
 294:	00 c0       	rjmp	.+0      	; 0x296 <LCD_write_char+0xca>
 296:	00 00       	nop
 298:	8b b3       	in	r24, 0x1b	; 27
 29a:	87 7f       	andi	r24, 0xF7	; 247
 29c:	8b bb       	out	0x1b, r24	; 27
 29e:	ef e9       	ldi	r30, 0x9F	; 159
 2a0:	ff e0       	ldi	r31, 0x0F	; 15
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_write_char+0xd6>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_write_char+0xdc>
 2a8:	00 00       	nop
 2aa:	08 95       	ret

000002ac <LCD_write_command>:
 2ac:	9b b3       	in	r25, 0x1b	; 27
 2ae:	9b 7f       	andi	r25, 0xFB	; 251
 2b0:	9b bb       	out	0x1b, r25	; 27
 2b2:	84 ff       	sbrs	r24, 4
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <LCD_write_command+0x12>
 2b6:	9b b3       	in	r25, 0x1b	; 27
 2b8:	90 61       	ori	r25, 0x10	; 16
 2ba:	9b bb       	out	0x1b, r25	; 27
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <LCD_write_command+0x18>
 2be:	9b b3       	in	r25, 0x1b	; 27
 2c0:	9f 7e       	andi	r25, 0xEF	; 239
 2c2:	9b bb       	out	0x1b, r25	; 27
 2c4:	85 ff       	sbrs	r24, 5
 2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <LCD_write_command+0x24>
 2c8:	9b b3       	in	r25, 0x1b	; 27
 2ca:	90 62       	ori	r25, 0x20	; 32
 2cc:	9b bb       	out	0x1b, r25	; 27
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <LCD_write_command+0x2a>
 2d0:	9b b3       	in	r25, 0x1b	; 27
 2d2:	9f 7d       	andi	r25, 0xDF	; 223
 2d4:	9b bb       	out	0x1b, r25	; 27
 2d6:	86 ff       	sbrs	r24, 6
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <LCD_write_command+0x36>
 2da:	9b b3       	in	r25, 0x1b	; 27
 2dc:	90 64       	ori	r25, 0x40	; 64
 2de:	9b bb       	out	0x1b, r25	; 27
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <LCD_write_command+0x3c>
 2e2:	9b b3       	in	r25, 0x1b	; 27
 2e4:	9f 7b       	andi	r25, 0xBF	; 191
 2e6:	9b bb       	out	0x1b, r25	; 27
 2e8:	88 23       	and	r24, r24
 2ea:	24 f4       	brge	.+8      	; 0x2f4 <LCD_write_command+0x48>
 2ec:	9b b3       	in	r25, 0x1b	; 27
 2ee:	90 68       	ori	r25, 0x80	; 128
 2f0:	9b bb       	out	0x1b, r25	; 27
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <LCD_write_command+0x4e>
 2f4:	9b b3       	in	r25, 0x1b	; 27
 2f6:	9f 77       	andi	r25, 0x7F	; 127
 2f8:	9b bb       	out	0x1b, r25	; 27
 2fa:	9b b3       	in	r25, 0x1b	; 27
 2fc:	98 60       	ori	r25, 0x08	; 8
 2fe:	9b bb       	out	0x1b, r25	; 27
 300:	ef e9       	ldi	r30, 0x9F	; 159
 302:	ff e0       	ldi	r31, 0x0F	; 15
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_write_command+0x58>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_write_command+0x5e>
 30a:	00 00       	nop
 30c:	9b b3       	in	r25, 0x1b	; 27
 30e:	97 7f       	andi	r25, 0xF7	; 247
 310:	9b bb       	out	0x1b, r25	; 27
 312:	ef e9       	ldi	r30, 0x9F	; 159
 314:	ff e0       	ldi	r31, 0x0F	; 15
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <LCD_write_command+0x6a>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_write_command+0x70>
 31c:	00 00       	nop
 31e:	80 ff       	sbrs	r24, 0
 320:	04 c0       	rjmp	.+8      	; 0x32a <LCD_write_command+0x7e>
 322:	9b b3       	in	r25, 0x1b	; 27
 324:	90 61       	ori	r25, 0x10	; 16
 326:	9b bb       	out	0x1b, r25	; 27
 328:	03 c0       	rjmp	.+6      	; 0x330 <LCD_write_command+0x84>
 32a:	9b b3       	in	r25, 0x1b	; 27
 32c:	9f 7e       	andi	r25, 0xEF	; 239
 32e:	9b bb       	out	0x1b, r25	; 27
 330:	81 ff       	sbrs	r24, 1
 332:	04 c0       	rjmp	.+8      	; 0x33c <LCD_write_command+0x90>
 334:	9b b3       	in	r25, 0x1b	; 27
 336:	90 62       	ori	r25, 0x20	; 32
 338:	9b bb       	out	0x1b, r25	; 27
 33a:	03 c0       	rjmp	.+6      	; 0x342 <LCD_write_command+0x96>
 33c:	9b b3       	in	r25, 0x1b	; 27
 33e:	9f 7d       	andi	r25, 0xDF	; 223
 340:	9b bb       	out	0x1b, r25	; 27
 342:	82 ff       	sbrs	r24, 2
 344:	04 c0       	rjmp	.+8      	; 0x34e <LCD_write_command+0xa2>
 346:	9b b3       	in	r25, 0x1b	; 27
 348:	90 64       	ori	r25, 0x40	; 64
 34a:	9b bb       	out	0x1b, r25	; 27
 34c:	03 c0       	rjmp	.+6      	; 0x354 <LCD_write_command+0xa8>
 34e:	9b b3       	in	r25, 0x1b	; 27
 350:	9f 7b       	andi	r25, 0xBF	; 191
 352:	9b bb       	out	0x1b, r25	; 27
 354:	83 ff       	sbrs	r24, 3
 356:	04 c0       	rjmp	.+8      	; 0x360 <LCD_write_command+0xb4>
 358:	8b b3       	in	r24, 0x1b	; 27
 35a:	80 68       	ori	r24, 0x80	; 128
 35c:	8b bb       	out	0x1b, r24	; 27
 35e:	03 c0       	rjmp	.+6      	; 0x366 <LCD_write_command+0xba>
 360:	8b b3       	in	r24, 0x1b	; 27
 362:	8f 77       	andi	r24, 0x7F	; 127
 364:	8b bb       	out	0x1b, r24	; 27
 366:	8b b3       	in	r24, 0x1b	; 27
 368:	88 60       	ori	r24, 0x08	; 8
 36a:	8b bb       	out	0x1b, r24	; 27
 36c:	8f e9       	ldi	r24, 0x9F	; 159
 36e:	9f e0       	ldi	r25, 0x0F	; 15
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_write_command+0xc4>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_write_command+0xca>
 376:	00 00       	nop
 378:	8b b3       	in	r24, 0x1b	; 27
 37a:	87 7f       	andi	r24, 0xF7	; 247
 37c:	8b bb       	out	0x1b, r24	; 27
 37e:	ef e9       	ldi	r30, 0x9F	; 159
 380:	ff e0       	ldi	r31, 0x0F	; 15
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_write_command+0xd6>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_write_command+0xdc>
 388:	00 00       	nop
 38a:	08 95       	ret

0000038c <LCD_init>:
 38c:	8a b3       	in	r24, 0x1a	; 26
 38e:	8c 6f       	ori	r24, 0xFC	; 252
 390:	8a bb       	out	0x1a, r24	; 26
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
 398:	8f e7       	ldi	r24, 0x7F	; 127
 39a:	9e e3       	ldi	r25, 0x3E	; 62
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <LCD_init+0x10>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <LCD_init+0x16>
 3a2:	00 00       	nop
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
 3aa:	8f e7       	ldi	r24, 0x7F	; 127
 3ac:	9e e3       	ldi	r25, 0x3E	; 62
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <LCD_init+0x22>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LCD_init+0x28>
 3b4:	00 00       	nop
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
 3bc:	8f e7       	ldi	r24, 0x7F	; 127
 3be:	9e e3       	ldi	r25, 0x3E	; 62
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <LCD_init+0x34>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <LCD_init+0x3a>
 3c6:	00 00       	nop
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
 3ce:	88 e2       	ldi	r24, 0x28	; 40
 3d0:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
 3da:	86 e0       	ldi	r24, 0x06	; 6
 3dc:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
 3e0:	8c e0       	ldi	r24, 0x0C	; 12
 3e2:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
 3e6:	9f ef       	ldi	r25, 0xFF	; 255
 3e8:	29 ef       	ldi	r18, 0xF9	; 249
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	91 50       	subi	r25, 0x01	; 1
 3ee:	20 40       	sbci	r18, 0x00	; 0
 3f0:	80 40       	sbci	r24, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <LCD_init+0x60>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <LCD_init+0x6a>
 3f6:	00 00       	nop
 3f8:	08 95       	ret

000003fa <LCD_write_string>:
* Purpose      : Write a string (*txt) to lcd (valid only with 4-bit mode)
*                (assume the end char of string is NULL (Ascii:'\0' - decimal:0 ))
* Parameters   : *txt  (array of char to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8_t * str){
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	8c 01       	movw	r16, r24
	uint8_t i;
	
	for(i = 0; str[i] != 0; i++){
 402:	c0 e0       	ldi	r28, 0x00	; 0
 404:	03 c0       	rjmp	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		LCD_write_char(str[i]);
 406:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8_t * str){
	uint8_t i;
	
	for(i = 0; str[i] != 0; i++){
 40a:	cf 5f       	subi	r28, 0xFF	; 255
 40c:	f8 01       	movw	r30, r16
 40e:	ec 0f       	add	r30, r28
 410:	f1 1d       	adc	r31, r1
 412:	80 81       	ld	r24, Z
 414:	81 11       	cpse	r24, r1
 416:	f7 cf       	rjmp	.-18     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		LCD_write_char(str[i]);
	}
	
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	08 95       	ret

00000420 <get_input_from_user>:
	}
	
    
}

uint8_t get_input_from_user(){
 420:	cf 93       	push	r28
	int8_t key;
	
	do{
		key = KEYPAD_read();
 422:	0e 94 5c 00 	call	0xb8	; 0xb8 <KEYPAD_read>
 426:	c8 2f       	mov	r28, r24
	}while(key == -1);
 428:	8f 3f       	cpi	r24, 0xFF	; 255
 42a:	d9 f3       	breq	.-10     	; 0x422 <get_input_from_user+0x2>
	
	//LCD_write_char(key);
	
	while(KEYPAD_read() != -1);
 42c:	0e 94 5c 00 	call	0xb8	; 0xb8 <KEYPAD_read>
 430:	8f 3f       	cpi	r24, 0xFF	; 255
 432:	e1 f7       	brne	.-8      	; 0x42c <get_input_from_user+0xc>
	
	return key;
}
 434:	8c 2f       	mov	r24, r28
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <get_password_from_user>:
uint8_t get_password_from_user(){
 43a:	cf 93       	push	r28
	int8_t key;
	
	do{
		key = KEYPAD_read();
 43c:	0e 94 5c 00 	call	0xb8	; 0xb8 <KEYPAD_read>
 440:	c8 2f       	mov	r28, r24
	}while(key == -1);
 442:	8f 3f       	cpi	r24, 0xFF	; 255
 444:	d9 f3       	breq	.-10     	; 0x43c <get_password_from_user+0x2>
	
	LCD_write_char(key);
 446:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
 44a:	2f ef       	ldi	r18, 0xFF	; 255
 44c:	83 ec       	ldi	r24, 0xC3	; 195
 44e:	99 e0       	ldi	r25, 0x09	; 9
 450:	21 50       	subi	r18, 0x01	; 1
 452:	80 40       	sbci	r24, 0x00	; 0
 454:	90 40       	sbci	r25, 0x00	; 0
 456:	e1 f7       	brne	.-8      	; 0x450 <get_password_from_user+0x16>
 458:	00 c0       	rjmp	.+0      	; 0x45a <get_password_from_user+0x20>
 45a:	00 00       	nop
	_delay_ms(200);
	LCD_write_command(16);
 45c:	80 e1       	ldi	r24, 0x10	; 16
 45e:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
	LCD_write_char('*');
 462:	8a e2       	ldi	r24, 0x2A	; 42
 464:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_write_char>
	while(KEYPAD_read() != -1);
 468:	0e 94 5c 00 	call	0xb8	; 0xb8 <KEYPAD_read>
 46c:	8f 3f       	cpi	r24, 0xFF	; 255
 46e:	e1 f7       	brne	.-8      	; 0x468 <get_password_from_user+0x2e>
	
	return key;
}
 470:	8c 2f       	mov	r24, r28
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <enter_password>:
		
		
	
}

uint8_t enter_password(uint8_t mode){
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	60 97       	sbiw	r28, 0x10	; 16
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61
	int password[4];
	int temp[4];
	// Loading the password
	if(mode == '0'){
 48e:	80 33       	cpi	r24, 0x30	; 48
 490:	b1 f0       	breq	.+44     	; 0x4be <enter_password+0x48>
 492:	00 e0       	ldi	r16, 0x00	; 0
 494:	10 e0       	ldi	r17, 0x00	; 0
 496:	2b c0       	rjmp	.+86     	; 0x4ee <enter_password+0x78>
		for(int i = 0; i < 4; i++){
			password[i] = eeprom_read(20+i);
 498:	c8 01       	movw	r24, r16
 49a:	44 96       	adiw	r24, 0x14	; 20
 49c:	0e 94 4d 00 	call	0x9a	; 0x9a <eeprom_read>
 4a0:	f8 01       	movw	r30, r16
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	21 e0       	ldi	r18, 0x01	; 1
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	2c 0f       	add	r18, r28
 4ac:	3d 1f       	adc	r19, r29
 4ae:	e2 0f       	add	r30, r18
 4b0:	f3 1f       	adc	r31, r19
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	91 83       	std	Z+1, r25	; 0x01
 4b6:	80 83       	st	Z, r24
uint8_t enter_password(uint8_t mode){
	int password[4];
	int temp[4];
	// Loading the password
	if(mode == '0'){
		for(int i = 0; i < 4; i++){
 4b8:	0f 5f       	subi	r16, 0xFF	; 255
 4ba:	1f 4f       	sbci	r17, 0xFF	; 255
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <enter_password+0x4c>
 4be:	00 e0       	ldi	r16, 0x00	; 0
 4c0:	10 e0       	ldi	r17, 0x00	; 0
 4c2:	04 30       	cpi	r16, 0x04	; 4
 4c4:	11 05       	cpc	r17, r1
 4c6:	44 f3       	brlt	.-48     	; 0x498 <enter_password+0x22>
 4c8:	15 c0       	rjmp	.+42     	; 0x4f4 <enter_password+0x7e>
			password[i] = eeprom_read(20+i);
		}
	}
	else{
		for(int i = 0; i < 4; i++){
			password[i] = eeprom_read(30+i);
 4ca:	c8 01       	movw	r24, r16
 4cc:	4e 96       	adiw	r24, 0x1e	; 30
 4ce:	0e 94 4d 00 	call	0x9a	; 0x9a <eeprom_read>
 4d2:	f8 01       	movw	r30, r16
 4d4:	ee 0f       	add	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	21 e0       	ldi	r18, 0x01	; 1
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	2c 0f       	add	r18, r28
 4de:	3d 1f       	adc	r19, r29
 4e0:	e2 0f       	add	r30, r18
 4e2:	f3 1f       	adc	r31, r19
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	91 83       	std	Z+1, r25	; 0x01
 4e8:	80 83       	st	Z, r24
		for(int i = 0; i < 4; i++){
			password[i] = eeprom_read(20+i);
		}
	}
	else{
		for(int i = 0; i < 4; i++){
 4ea:	0f 5f       	subi	r16, 0xFF	; 255
 4ec:	1f 4f       	sbci	r17, 0xFF	; 255
 4ee:	04 30       	cpi	r16, 0x04	; 4
 4f0:	11 05       	cpc	r17, r1
 4f2:	5c f3       	brlt	.-42     	; 0x4ca <enter_password+0x54>
 4f4:	00 e0       	ldi	r16, 0x00	; 0
 4f6:	10 e0       	ldi	r17, 0x00	; 0
 4f8:	10 c0       	rjmp	.+32     	; 0x51a <enter_password+0xa4>
	}
	
	
	// enter password
	for(int i = 0; i < 4; i++){
		temp[i] = get_password_from_user();
 4fa:	0e 94 1d 02 	call	0x43a	; 0x43a <get_password_from_user>
 4fe:	f8 01       	movw	r30, r16
 500:	ee 0f       	add	r30, r30
 502:	ff 1f       	adc	r31, r31
 504:	21 e0       	ldi	r18, 0x01	; 1
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	2c 0f       	add	r18, r28
 50a:	3d 1f       	adc	r19, r29
 50c:	e2 0f       	add	r30, r18
 50e:	f3 1f       	adc	r31, r19
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	91 87       	std	Z+9, r25	; 0x09
 514:	80 87       	std	Z+8, r24	; 0x08
		}
	}
	
	
	// enter password
	for(int i = 0; i < 4; i++){
 516:	0f 5f       	subi	r16, 0xFF	; 255
 518:	1f 4f       	sbci	r17, 0xFF	; 255
 51a:	04 30       	cpi	r16, 0x04	; 4
 51c:	11 05       	cpc	r17, r1
 51e:	6c f3       	brlt	.-38     	; 0x4fa <enter_password+0x84>
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	11 c0       	rjmp	.+34     	; 0x548 <enter_password+0xd2>
		temp[i] = get_password_from_user();
	}

	//check
	for(int i = 0; i < 4; i++){
		if(temp[i] != password[i]){
 526:	fc 01       	movw	r30, r24
 528:	ee 0f       	add	r30, r30
 52a:	ff 1f       	adc	r31, r31
 52c:	21 e0       	ldi	r18, 0x01	; 1
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	2c 0f       	add	r18, r28
 532:	3d 1f       	adc	r19, r29
 534:	e2 0f       	add	r30, r18
 536:	f3 1f       	adc	r31, r19
 538:	40 85       	ldd	r20, Z+8	; 0x08
 53a:	51 85       	ldd	r21, Z+9	; 0x09
 53c:	20 81       	ld	r18, Z
 53e:	31 81       	ldd	r19, Z+1	; 0x01
 540:	42 17       	cp	r20, r18
 542:	53 07       	cpc	r21, r19
 544:	31 f4       	brne	.+12     	; 0x552 <enter_password+0xdc>
	for(int i = 0; i < 4; i++){
		temp[i] = get_password_from_user();
	}

	//check
	for(int i = 0; i < 4; i++){
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	84 30       	cpi	r24, 0x04	; 4
 54a:	91 05       	cpc	r25, r1
 54c:	64 f3       	brlt	.-40     	; 0x526 <enter_password+0xb0>
		if(temp[i] != password[i]){
			return 1;
		}
	}
	return 0;
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	01 c0       	rjmp	.+2      	; 0x554 <enter_password+0xde>
	}

	//check
	for(int i = 0; i < 4; i++){
		if(temp[i] != password[i]){
			return 1;
 552:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
 554:	60 96       	adiw	r28, 0x10	; 16
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	cd bf       	out	0x3d, r28	; 61
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	08 95       	ret

0000056a <admin_control>:

void admin_control(){
 56a:	ff 92       	push	r15
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
	// turn admin led on
	SETBIT(PORTD, 0);  // PD0 high
 574:	82 b3       	in	r24, 0x12	; 18
 576:	81 60       	ori	r24, 0x01	; 1
 578:	82 bb       	out	0x12, r24	; 18
	
	uint8_t menu = 0;
	uint8_t exit = 0;
 57a:	f1 2c       	mov	r15, r1

void admin_control(){
	// turn admin led on
	SETBIT(PORTD, 0);  // PD0 high
	
	uint8_t menu = 0;
 57c:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t exit = 0;
	
	do{
		int input;
		
		LCD_write_command(1);
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		if(menu == 0){
 584:	01 11       	cpse	r16, r1
 586:	4d c0       	rjmp	.+154    	; 0x622 <admin_control+0xb8>
			LCD_write_string("1:Room1 2:Room2");
 588:	80 e6       	ldi	r24, 0x60	; 96
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
			LCD_write_command(0xc0);
 590:	80 ec       	ldi	r24, 0xC0	; 192
 592:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
			LCD_write_string("3:Room3 4:more");
 596:	80 e7       	ldi	r24, 0x70	; 112
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
			input = get_input_from_user();
 59e:	0e 94 10 02 	call	0x420	; 0x420 <get_input_from_user>
 5a2:	18 2f       	mov	r17, r24
 5a4:	c8 2f       	mov	r28, r24
 5a6:	d0 e0       	ldi	r29, 0x00	; 0
			
			LCD_write_command(1);
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
			switch(input){
 5ae:	12 33       	cpi	r17, 0x32	; 50
 5b0:	b1 f0       	breq	.+44     	; 0x5de <admin_control+0x74>
 5b2:	13 33       	cpi	r17, 0x33	; 51
 5b4:	29 f1       	breq	.+74     	; 0x600 <admin_control+0x96>
 5b6:	11 33       	cpi	r17, 0x31	; 49
 5b8:	09 f0       	breq	.+2      	; 0x5bc <admin_control+0x52>
 5ba:	7d c0       	rjmp	.+250    	; 0x6b6 <admin_control+0x14c>
				case '1': LCD_write_string("Room 1 chosen"); SPI_write(1); _delay_ms(200); break;
 5bc:	8f e7       	ldi	r24, 0x7F	; 127
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <SPI_write>
 5ca:	2f ef       	ldi	r18, 0xFF	; 255
 5cc:	83 ec       	ldi	r24, 0xC3	; 195
 5ce:	99 e0       	ldi	r25, 0x09	; 9
 5d0:	21 50       	subi	r18, 0x01	; 1
 5d2:	80 40       	sbci	r24, 0x00	; 0
 5d4:	90 40       	sbci	r25, 0x00	; 0
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <admin_control+0x66>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <admin_control+0x70>
 5da:	00 00       	nop
 5dc:	6c c0       	rjmp	.+216    	; 0x6b6 <admin_control+0x14c>
				case '2': LCD_write_string("Room 2 chosen"); SPI_write(2); _delay_ms(200); break;
 5de:	8d e8       	ldi	r24, 0x8D	; 141
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 5e6:	82 e0       	ldi	r24, 0x02	; 2
 5e8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <SPI_write>
 5ec:	2f ef       	ldi	r18, 0xFF	; 255
 5ee:	83 ec       	ldi	r24, 0xC3	; 195
 5f0:	99 e0       	ldi	r25, 0x09	; 9
 5f2:	21 50       	subi	r18, 0x01	; 1
 5f4:	80 40       	sbci	r24, 0x00	; 0
 5f6:	90 40       	sbci	r25, 0x00	; 0
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <admin_control+0x88>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <admin_control+0x92>
 5fc:	00 00       	nop
 5fe:	5b c0       	rjmp	.+182    	; 0x6b6 <admin_control+0x14c>
				case '3': LCD_write_string("Room 3 chosen"); SPI_write(3); _delay_ms(200); break;
 600:	8b e9       	ldi	r24, 0x9B	; 155
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <SPI_write>
 60e:	2f ef       	ldi	r18, 0xFF	; 255
 610:	83 ec       	ldi	r24, 0xC3	; 195
 612:	99 e0       	ldi	r25, 0x09	; 9
 614:	21 50       	subi	r18, 0x01	; 1
 616:	80 40       	sbci	r24, 0x00	; 0
 618:	90 40       	sbci	r25, 0x00	; 0
 61a:	e1 f7       	brne	.-8      	; 0x614 <admin_control+0xaa>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <admin_control+0xb4>
 61e:	00 00       	nop
 620:	4a c0       	rjmp	.+148    	; 0x6b6 <admin_control+0x14c>
				default: break;
			}
		}
		else{
			LCD_write_string("5:TV 6:AC");
 622:	89 ea       	ldi	r24, 0xA9	; 169
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
			LCD_write_command(0xc0);
 62a:	80 ec       	ldi	r24, 0xC0	; 192
 62c:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
			LCD_write_string("7:back 8:Exit");
 630:	83 eb       	ldi	r24, 0xB3	; 179
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
			input = get_input_from_user();
 638:	0e 94 10 02 	call	0x420	; 0x420 <get_input_from_user>
 63c:	18 2f       	mov	r17, r24
 63e:	c8 2f       	mov	r28, r24
 640:	d0 e0       	ldi	r29, 0x00	; 0
			
			LCD_write_command(1);
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
			switch(input){
 648:	16 33       	cpi	r17, 0x36	; 54
 64a:	a9 f0       	breq	.+42     	; 0x676 <admin_control+0x10c>
 64c:	18 33       	cpi	r17, 0x38	; 56
 64e:	21 f1       	breq	.+72     	; 0x698 <admin_control+0x12e>
 650:	15 33       	cpi	r17, 0x35	; 53
 652:	89 f5       	brne	.+98     	; 0x6b6 <admin_control+0x14c>
				case '5': LCD_write_string("TV chosen"); SPI_write(5); _delay_ms(200); break;
 654:	81 ec       	ldi	r24, 0xC1	; 193
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 65c:	85 e0       	ldi	r24, 0x05	; 5
 65e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <SPI_write>
 662:	2f ef       	ldi	r18, 0xFF	; 255
 664:	83 ec       	ldi	r24, 0xC3	; 195
 666:	99 e0       	ldi	r25, 0x09	; 9
 668:	21 50       	subi	r18, 0x01	; 1
 66a:	80 40       	sbci	r24, 0x00	; 0
 66c:	90 40       	sbci	r25, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <admin_control+0xfe>
 670:	00 c0       	rjmp	.+0      	; 0x672 <admin_control+0x108>
 672:	00 00       	nop
 674:	20 c0       	rjmp	.+64     	; 0x6b6 <admin_control+0x14c>
				case '6': LCD_write_string("AC chosen"); SPI_write(6); _delay_ms(200); break;
 676:	8b ec       	ldi	r24, 0xCB	; 203
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 67e:	86 e0       	ldi	r24, 0x06	; 6
 680:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <SPI_write>
 684:	2f ef       	ldi	r18, 0xFF	; 255
 686:	83 ec       	ldi	r24, 0xC3	; 195
 688:	99 e0       	ldi	r25, 0x09	; 9
 68a:	21 50       	subi	r18, 0x01	; 1
 68c:	80 40       	sbci	r24, 0x00	; 0
 68e:	90 40       	sbci	r25, 0x00	; 0
 690:	e1 f7       	brne	.-8      	; 0x68a <admin_control+0x120>
 692:	00 c0       	rjmp	.+0      	; 0x694 <admin_control+0x12a>
 694:	00 00       	nop
 696:	0f c0       	rjmp	.+30     	; 0x6b6 <admin_control+0x14c>
				case '8': LCD_write_string("Exit"); exit = 1 ; _delay_ms(200); break;
 698:	8f ed       	ldi	r24, 0xDF	; 223
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 6a0:	2f ef       	ldi	r18, 0xFF	; 255
 6a2:	83 ec       	ldi	r24, 0xC3	; 195
 6a4:	99 e0       	ldi	r25, 0x09	; 9
 6a6:	21 50       	subi	r18, 0x01	; 1
 6a8:	80 40       	sbci	r24, 0x00	; 0
 6aa:	90 40       	sbci	r25, 0x00	; 0
 6ac:	e1 f7       	brne	.-8      	; 0x6a6 <admin_control+0x13c>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <admin_control+0x146>
 6b0:	00 00       	nop
 6b2:	ff 24       	eor	r15, r15
 6b4:	f3 94       	inc	r15
			}
		}
		
		
		
		if((input == '4') || (input == '7')){
 6b6:	c4 33       	cpi	r28, 0x34	; 52
 6b8:	d1 05       	cpc	r29, r1
 6ba:	11 f0       	breq	.+4      	; 0x6c0 <admin_control+0x156>
 6bc:	e7 97       	sbiw	r28, 0x37	; 55
 6be:	29 f4       	brne	.+10     	; 0x6ca <admin_control+0x160>
			if(menu == 0){
 6c0:	01 11       	cpse	r16, r1
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <admin_control+0x15e>
				menu = 1;
 6c4:	01 e0       	ldi	r16, 0x01	; 1
 6c6:	01 c0       	rjmp	.+2      	; 0x6ca <admin_control+0x160>
			}
			else{
				menu = 0;
 6c8:	00 e0       	ldi	r16, 0x00	; 0
			}
		}

	}while(exit != 1);
 6ca:	21 e0       	ldi	r18, 0x01	; 1
 6cc:	f2 12       	cpse	r15, r18
 6ce:	57 cf       	rjmp	.-338    	; 0x57e <admin_control+0x14>
	
	// turn admin led off
	CLRBIT(PORTD, 0);  // PD0 low
 6d0:	82 b3       	in	r24, 0x12	; 18
 6d2:	8e 7f       	andi	r24, 0xFE	; 254
 6d4:	82 bb       	out	0x12, r24	; 18
}
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	1f 91       	pop	r17
 6dc:	0f 91       	pop	r16
 6de:	ff 90       	pop	r15
 6e0:	08 95       	ret

000006e2 <guest_control>:

void guest_control(){
 6e2:	cf 93       	push	r28
 6e4:	df 93       	push	r29
	// turn guest led on
	SETBIT(PORTD, 1);  // PD1 high
 6e6:	82 b3       	in	r24, 0x12	; 18
 6e8:	82 60       	ori	r24, 0x02	; 2
 6ea:	82 bb       	out	0x12, r24	; 18
	
	uint8_t exit = 0;
 6ec:	d0 e0       	ldi	r29, 0x00	; 0
	
	do{
		int input;
		LCD_write_command(1);
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		LCD_write_string("1:Room1 2:Room2");
 6f4:	80 e6       	ldi	r24, 0x60	; 96
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
		LCD_write_command(0xc0);
 6fc:	80 ec       	ldi	r24, 0xC0	; 192
 6fe:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		LCD_write_string("3:Room3 4:Exit");
 702:	85 ed       	ldi	r24, 0xD5	; 213
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
		input = get_input_from_user();
 70a:	0e 94 10 02 	call	0x420	; 0x420 <get_input_from_user>
 70e:	c8 2f       	mov	r28, r24
		
		LCD_write_command(1);
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		switch(input){
 716:	c2 33       	cpi	r28, 0x32	; 50
 718:	d1 f0       	breq	.+52     	; 0x74e <guest_control+0x6c>
 71a:	18 f4       	brcc	.+6      	; 0x722 <guest_control+0x40>
 71c:	c1 33       	cpi	r28, 0x31	; 49
 71e:	31 f0       	breq	.+12     	; 0x72c <guest_control+0x4a>
 720:	46 c0       	rjmp	.+140    	; 0x7ae <guest_control+0xcc>
 722:	c3 33       	cpi	r28, 0x33	; 51
 724:	29 f1       	breq	.+74     	; 0x770 <guest_control+0x8e>
 726:	c4 33       	cpi	r28, 0x34	; 52
 728:	a1 f1       	breq	.+104    	; 0x792 <guest_control+0xb0>
 72a:	41 c0       	rjmp	.+130    	; 0x7ae <guest_control+0xcc>
			case '1': LCD_write_string("Room 1 chosen"); SPI_write(1); _delay_ms(200); break;
 72c:	8f e7       	ldi	r24, 0x7F	; 127
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <SPI_write>
 73a:	2f ef       	ldi	r18, 0xFF	; 255
 73c:	83 ec       	ldi	r24, 0xC3	; 195
 73e:	99 e0       	ldi	r25, 0x09	; 9
 740:	21 50       	subi	r18, 0x01	; 1
 742:	80 40       	sbci	r24, 0x00	; 0
 744:	90 40       	sbci	r25, 0x00	; 0
 746:	e1 f7       	brne	.-8      	; 0x740 <guest_control+0x5e>
 748:	00 c0       	rjmp	.+0      	; 0x74a <guest_control+0x68>
 74a:	00 00       	nop
 74c:	30 c0       	rjmp	.+96     	; 0x7ae <guest_control+0xcc>
			case '2': LCD_write_string("Room 2 chosen"); SPI_write(2); _delay_ms(200); break;
 74e:	8d e8       	ldi	r24, 0x8D	; 141
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <SPI_write>
 75c:	2f ef       	ldi	r18, 0xFF	; 255
 75e:	83 ec       	ldi	r24, 0xC3	; 195
 760:	99 e0       	ldi	r25, 0x09	; 9
 762:	21 50       	subi	r18, 0x01	; 1
 764:	80 40       	sbci	r24, 0x00	; 0
 766:	90 40       	sbci	r25, 0x00	; 0
 768:	e1 f7       	brne	.-8      	; 0x762 <guest_control+0x80>
 76a:	00 c0       	rjmp	.+0      	; 0x76c <guest_control+0x8a>
 76c:	00 00       	nop
 76e:	1f c0       	rjmp	.+62     	; 0x7ae <guest_control+0xcc>
			case '3': LCD_write_string("Room 3 chosen"); SPI_write(3); _delay_ms(200); break;
 770:	8b e9       	ldi	r24, 0x9B	; 155
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 778:	83 e0       	ldi	r24, 0x03	; 3
 77a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <SPI_write>
 77e:	2f ef       	ldi	r18, 0xFF	; 255
 780:	83 ec       	ldi	r24, 0xC3	; 195
 782:	99 e0       	ldi	r25, 0x09	; 9
 784:	21 50       	subi	r18, 0x01	; 1
 786:	80 40       	sbci	r24, 0x00	; 0
 788:	90 40       	sbci	r25, 0x00	; 0
 78a:	e1 f7       	brne	.-8      	; 0x784 <guest_control+0xa2>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <guest_control+0xac>
 78e:	00 00       	nop
 790:	0e c0       	rjmp	.+28     	; 0x7ae <guest_control+0xcc>
			case '4': LCD_write_string("Exit"); exit = 1 ; _delay_ms(200); break;
 792:	8f ed       	ldi	r24, 0xDF	; 223
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 79a:	2f ef       	ldi	r18, 0xFF	; 255
 79c:	83 ec       	ldi	r24, 0xC3	; 195
 79e:	99 e0       	ldi	r25, 0x09	; 9
 7a0:	21 50       	subi	r18, 0x01	; 1
 7a2:	80 40       	sbci	r24, 0x00	; 0
 7a4:	90 40       	sbci	r25, 0x00	; 0
 7a6:	e1 f7       	brne	.-8      	; 0x7a0 <guest_control+0xbe>
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <guest_control+0xc8>
 7aa:	00 00       	nop
 7ac:	d1 e0       	ldi	r29, 0x01	; 1
			default: break;
		}
		
	}while(exit != 1);
 7ae:	d1 30       	cpi	r29, 0x01	; 1
 7b0:	09 f0       	breq	.+2      	; 0x7b4 <guest_control+0xd2>
 7b2:	9d cf       	rjmp	.-198    	; 0x6ee <guest_control+0xc>
	
	// turn guest led off
	CLRBIT(PORTD, 1);  // PD1 low
 7b4:	82 b3       	in	r24, 0x12	; 18
 7b6:	8d 7f       	andi	r24, 0xFD	; 253
 7b8:	82 bb       	out	0x12, r24	; 18
	
}
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	08 95       	ret

000007c0 <lock_system>:
	while(KEYPAD_read() != -1);
	
	return key;
}

void lock_system(){
 7c0:	cf 93       	push	r28
	// first time
	if(eeprom_read(100) != 4){
 7c2:	84 e6       	ldi	r24, 0x64	; 100
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 4d 00 	call	0x9a	; 0x9a <eeprom_read>
 7ca:	84 30       	cpi	r24, 0x04	; 4
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <lock_system+0x10>
 7ce:	70 c0       	rjmp	.+224    	; 0x8b0 <__stack+0x51>
		LCD_write_command(1);
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		LCD_write_string("Login for");
 7d6:	84 ee       	ldi	r24, 0xE4	; 228
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
		LCD_write_command(0xc0);
 7de:	80 ec       	ldi	r24, 0xC0	; 192
 7e0:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		LCD_write_string("first time");
 7e4:	8e ee       	ldi	r24, 0xEE	; 238
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 7ec:	2f ef       	ldi	r18, 0xFF	; 255
 7ee:	87 e8       	ldi	r24, 0x87	; 135
 7f0:	93 e1       	ldi	r25, 0x13	; 19
 7f2:	21 50       	subi	r18, 0x01	; 1
 7f4:	80 40       	sbci	r24, 0x00	; 0
 7f6:	90 40       	sbci	r25, 0x00	; 0
 7f8:	e1 f7       	brne	.-8      	; 0x7f2 <lock_system+0x32>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <lock_system+0x3c>
 7fc:	00 00       	nop
		_delay_ms(400);
		
		eeprom_write(100, 4);
 7fe:	64 e0       	ldi	r22, 0x04	; 4
 800:	84 e6       	ldi	r24, 0x64	; 100
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
		
		// Setting Admin password 
		LCD_write_command(1);
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		LCD_write_string("Set Admin pass");
 80e:	89 ef       	ldi	r24, 0xF9	; 249
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
		LCD_write_command(0xc0);
 816:	80 ec       	ldi	r24, 0xC0	; 192
 818:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		LCD_write_string("Admin pass: ");
 81c:	88 e0       	ldi	r24, 0x08	; 8
 81e:	91 e0       	ldi	r25, 0x01	; 1
 820:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
		
		eeprom_write(20, get_password_from_user());
 824:	0e 94 1d 02 	call	0x43a	; 0x43a <get_password_from_user>
 828:	68 2f       	mov	r22, r24
 82a:	84 e1       	ldi	r24, 0x14	; 20
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
		eeprom_write(21, get_password_from_user());
 832:	0e 94 1d 02 	call	0x43a	; 0x43a <get_password_from_user>
 836:	68 2f       	mov	r22, r24
 838:	85 e1       	ldi	r24, 0x15	; 21
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
		eeprom_write(22, get_password_from_user());
 840:	0e 94 1d 02 	call	0x43a	; 0x43a <get_password_from_user>
 844:	68 2f       	mov	r22, r24
 846:	86 e1       	ldi	r24, 0x16	; 22
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
		eeprom_write(23, get_password_from_user());
 84e:	0e 94 1d 02 	call	0x43a	; 0x43a <get_password_from_user>
 852:	68 2f       	mov	r22, r24
 854:	87 e1       	ldi	r24, 0x17	; 23
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
		
		// Setting Guest password
		LCD_write_command(1);
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		LCD_write_string("Set Guest pass");
 862:	85 e1       	ldi	r24, 0x15	; 21
 864:	91 e0       	ldi	r25, 0x01	; 1
 866:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
		LCD_write_command(0xc0);
 86a:	80 ec       	ldi	r24, 0xC0	; 192
 86c:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		LCD_write_string("Guest pass: ");
 870:	84 e2       	ldi	r24, 0x24	; 36
 872:	91 e0       	ldi	r25, 0x01	; 1
 874:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
		
		eeprom_write(30, get_password_from_user());
 878:	0e 94 1d 02 	call	0x43a	; 0x43a <get_password_from_user>
 87c:	68 2f       	mov	r22, r24
 87e:	8e e1       	ldi	r24, 0x1E	; 30
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
		eeprom_write(31, get_password_from_user());
 886:	0e 94 1d 02 	call	0x43a	; 0x43a <get_password_from_user>
 88a:	68 2f       	mov	r22, r24
 88c:	8f e1       	ldi	r24, 0x1F	; 31
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
		eeprom_write(32, get_password_from_user());
 894:	0e 94 1d 02 	call	0x43a	; 0x43a <get_password_from_user>
 898:	68 2f       	mov	r22, r24
 89a:	80 e2       	ldi	r24, 0x20	; 32
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
		eeprom_write(33, get_password_from_user());
 8a2:	0e 94 1d 02 	call	0x43a	; 0x43a <get_password_from_user>
 8a6:	68 2f       	mov	r22, r24
 8a8:	81 e2       	ldi	r24, 0x21	; 33
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 41 00 	call	0x82	; 0x82 <eeprom_write>
		
	}
	
	LCD_write_command(1);
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
	LCD_write_string("Select mode: ");
 8b6:	81 e3       	ldi	r24, 0x31	; 49
 8b8:	91 e0       	ldi	r25, 0x01	; 1
 8ba:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
	LCD_write_command(0xc0);
 8be:	80 ec       	ldi	r24, 0xC0	; 192
 8c0:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
	LCD_write_string("0:Admin  1:Guest");
 8c4:	8f e3       	ldi	r24, 0x3F	; 63
 8c6:	91 e0       	ldi	r25, 0x01	; 1
 8c8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
	
	uint8_t mode = get_input_from_user();
 8cc:	0e 94 10 02 	call	0x420	; 0x420 <get_input_from_user>
 8d0:	c8 2f       	mov	r28, r24
	
	LCD_write_command(1);
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
	if(mode == '0'){
 8d8:	c0 33       	cpi	r28, 0x30	; 48
 8da:	61 f4       	brne	.+24     	; 0x8f4 <__stack+0x95>
		LCD_write_string("Admin Mode");
 8dc:	80 e5       	ldi	r24, 0x50	; 80
 8de:	91 e0       	ldi	r25, 0x01	; 1
 8e0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
		LCD_write_command(0xc0);
 8e4:	80 ec       	ldi	r24, 0xC0	; 192
 8e6:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		LCD_write_string("Enter pass: ");	
 8ea:	8b e5       	ldi	r24, 0x5B	; 91
 8ec:	91 e0       	ldi	r25, 0x01	; 1
 8ee:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 8f2:	0d c0       	rjmp	.+26     	; 0x90e <__stack+0xaf>
		
	}
	else if(mode == '1'){
 8f4:	c1 33       	cpi	r28, 0x31	; 49
 8f6:	59 f4       	brne	.+22     	; 0x90e <__stack+0xaf>
		LCD_write_string("Guest Mode");
 8f8:	88 e6       	ldi	r24, 0x68	; 104
 8fa:	91 e0       	ldi	r25, 0x01	; 1
 8fc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
		LCD_write_command(0xc0);
 900:	80 ec       	ldi	r24, 0xC0	; 192
 902:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		LCD_write_string("Enter pass: ");
 906:	8b e5       	ldi	r24, 0x5B	; 91
 908:	91 e0       	ldi	r25, 0x01	; 1
 90a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
	}
		
	if(enter_password(mode) == 0){
 90e:	8c 2f       	mov	r24, r28
 910:	0e 94 3b 02 	call	0x476	; 0x476 <enter_password>
 914:	81 11       	cpse	r24, r1
 916:	18 c0       	rjmp	.+48     	; 0x948 <__stack+0xe9>
		LCD_write_command(1);
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		LCD_write_string("Correct pass");
 91e:	83 e7       	ldi	r24, 0x73	; 115
 920:	91 e0       	ldi	r25, 0x01	; 1
 922:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 926:	2f ef       	ldi	r18, 0xFF	; 255
 928:	83 ec       	ldi	r24, 0xC3	; 195
 92a:	99 e0       	ldi	r25, 0x09	; 9
 92c:	21 50       	subi	r18, 0x01	; 1
 92e:	80 40       	sbci	r24, 0x00	; 0
 930:	90 40       	sbci	r25, 0x00	; 0
 932:	e1 f7       	brne	.-8      	; 0x92c <__stack+0xcd>
 934:	00 c0       	rjmp	.+0      	; 0x936 <__stack+0xd7>
 936:	00 00       	nop
		_delay_ms(200);
		if(mode == '0'){
 938:	c0 33       	cpi	r28, 0x30	; 48
 93a:	19 f4       	brne	.+6      	; 0x942 <__stack+0xe3>
			admin_control();
 93c:	0e 94 b5 02 	call	0x56a	; 0x56a <admin_control>
 940:	22 c0       	rjmp	.+68     	; 0x986 <__stack+0x127>
		}
		else{
			guest_control();
 942:	0e 94 71 03 	call	0x6e2	; 0x6e2 <guest_control>
 946:	1f c0       	rjmp	.+62     	; 0x986 <__stack+0x127>
		}
	}
	else{
		LCD_write_command(1);
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_command>
		LCD_write_string("Wrong pass");
 94e:	80 e8       	ldi	r24, 0x80	; 128
 950:	91 e0       	ldi	r25, 0x01	; 1
 952:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 956:	2f ef       	ldi	r18, 0xFF	; 255
 958:	89 e6       	ldi	r24, 0x69	; 105
 95a:	98 e1       	ldi	r25, 0x18	; 24
 95c:	21 50       	subi	r18, 0x01	; 1
 95e:	80 40       	sbci	r24, 0x00	; 0
 960:	90 40       	sbci	r25, 0x00	; 0
 962:	e1 f7       	brne	.-8      	; 0x95c <__stack+0xfd>
 964:	00 c0       	rjmp	.+0      	; 0x966 <__stack+0x107>
 966:	00 00       	nop
		_delay_ms(500);
		// turn block led on
		SETBIT(PORTD, 2);  // PD2 high
 968:	82 b3       	in	r24, 0x12	; 18
 96a:	84 60       	ori	r24, 0x04	; 4
 96c:	82 bb       	out	0x12, r24	; 18
 96e:	2f ef       	ldi	r18, 0xFF	; 255
 970:	87 ea       	ldi	r24, 0xA7	; 167
 972:	91 e6       	ldi	r25, 0x61	; 97
 974:	21 50       	subi	r18, 0x01	; 1
 976:	80 40       	sbci	r24, 0x00	; 0
 978:	90 40       	sbci	r25, 0x00	; 0
 97a:	e1 f7       	brne	.-8      	; 0x974 <__stack+0x115>
 97c:	00 c0       	rjmp	.+0      	; 0x97e <__stack+0x11f>
 97e:	00 00       	nop
		_delay_ms(2000);
		CLRBIT(PORTD, 2);
 980:	82 b3       	in	r24, 0x12	; 18
 982:	8b 7f       	andi	r24, 0xFB	; 251
 984:	82 bb       	out	0x12, r24	; 18
	}
		
		
	
}
 986:	cf 91       	pop	r28
 988:	08 95       	ret

0000098a <main>:
void guest_control(void);


int main(void)
{
    SPI_init_master();
 98a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <SPI_init_master>
	KEYPAD_init();	
 98e:	0e 94 56 00 	call	0xac	; 0xac <KEYPAD_init>
	LCD_init();
 992:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_init>
	
	LCD_write_string("Hi, Im master");
 996:	8b e8       	ldi	r24, 0x8B	; 139
 998:	91 e0       	ldi	r25, 0x01	; 1
 99a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
 99e:	2f ef       	ldi	r18, 0xFF	; 255
 9a0:	87 e8       	ldi	r24, 0x87	; 135
 9a2:	93 e1       	ldi	r25, 0x13	; 19
 9a4:	21 50       	subi	r18, 0x01	; 1
 9a6:	80 40       	sbci	r24, 0x00	; 0
 9a8:	90 40       	sbci	r25, 0x00	; 0
 9aa:	e1 f7       	brne	.-8      	; 0x9a4 <main+0x1a>
 9ac:	00 c0       	rjmp	.+0      	; 0x9ae <main+0x24>
 9ae:	00 00       	nop
	_delay_ms(400);
	
	
	//set pins
	SETBIT(DDRD, 0);  // PD0 output
 9b0:	81 b3       	in	r24, 0x11	; 17
 9b2:	81 60       	ori	r24, 0x01	; 1
 9b4:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD, 1);  // PD1 output
 9b6:	81 b3       	in	r24, 0x11	; 17
 9b8:	82 60       	ori	r24, 0x02	; 2
 9ba:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD, 2);  // PD2 output
 9bc:	81 b3       	in	r24, 0x11	; 17
 9be:	84 60       	ori	r24, 0x04	; 4
 9c0:	81 bb       	out	0x11, r24	; 17
	SETBIT(PORTD, 1);  // PD1 high
	SETBIT(PORTD, 2);  // PD2 high
	*/
	
	while(1){
		lock_system();
 9c2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lock_system>
 9c6:	fd cf       	rjmp	.-6      	; 0x9c2 <main+0x38>

000009c8 <SPI_init_master>:
	
	SPCR = 1<<MSTR | 1<<SPE;
}
void SPI_init_slave(void){
	SETBIT(DDRB,MISO);
	SPCR =  1<<SPE;
 9c8:	87 b3       	in	r24, 0x17	; 23
 9ca:	80 62       	ori	r24, 0x20	; 32
 9cc:	87 bb       	out	0x17, r24	; 23
 9ce:	87 b3       	in	r24, 0x17	; 23
 9d0:	80 61       	ori	r24, 0x10	; 16
 9d2:	87 bb       	out	0x17, r24	; 23
 9d4:	87 b3       	in	r24, 0x17	; 23
 9d6:	80 68       	ori	r24, 0x80	; 128
 9d8:	87 bb       	out	0x17, r24	; 23
 9da:	80 e5       	ldi	r24, 0x50	; 80
 9dc:	8d b9       	out	0x0d, r24	; 13
 9de:	08 95       	ret

000009e0 <SPI_write>:
}

void SPI_write(uint8_t data){
	SPDR = data;
 9e0:	8f b9       	out	0x0f, r24	; 15
	while(READBIT(SPSR,SPIF) == 0);
 9e2:	77 9b       	sbis	0x0e, 7	; 14
 9e4:	fe cf       	rjmp	.-4      	; 0x9e2 <SPI_write+0x2>
}
 9e6:	08 95       	ret

000009e8 <_exit>:
 9e8:	f8 94       	cli

000009ea <__stop_program>:
 9ea:	ff cf       	rjmp	.-2      	; 0x9ea <__stop_program>
